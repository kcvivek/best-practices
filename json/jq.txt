# Here is the full output in json
$ curl https://portal2-t2.vera.com/api/health/status 2>/dev/null | jq '.'
{
  "status": {
    "DatabaseEngine": {
      "state": "UP"
    },
    "Redis": {
      "state": "DOWN"
    },
    "DatabaseSearch": {
      "state": "UP"
    },
    "Portal": {
      "state": "UP"
    },
    "Analytics": {
      "state": "UP"
    },
    "AppEngine": {
      "state": "UP"
    },
    "Server": {
      "state": "UP"
    }
  }
}

# Filter for Redis that's under status object , and call it as Engine
$ curl https://portal2-t2.vera.com/api/health/status 2>/dev/null | jq '.|{Engine: .status.Redis}'
{
  "Engine": {
    "state": "DOWN"
  }
}

# Filter for Redis & AppEngine that's under status object , and call it as AppEngine & Redis
$ curl https://portal2-t2.vera.com/api/health/status 2>/dev/null | jq '.|{AppEngine: .status.AppEngine.state, Redis: .status.Redis.state}'
{
  "AppEngine": "UP",
  "Redis": "DOWN"
}

# Filter for Redis & AppEngine that's under status object , and call it as App & DB
$ curl https://portal2-t2.vera.com/api/health/status 2>/dev/null | jq '.|{App: .status.AppEngine.state, DB: .status.Redis.state}'
{
  "App": "UP",
  "DB": "DOWN"
}


# Manupulate values inside array if you need to (notice changes in output formatting)
$ curl https://portal2-t2.vera.com/api/health/status 2>/dev/null | jq '.|{AppEngine: .status.AppEngine, Redis: [.status.Redis]}'
{
  "AppEngine": {
    "state": "UP"
  },
  "Redis": [
    {
      "state": "DOWN"
    }
  ]
}
# Cascade it however you like it
$ curl https://portal2-t2.vera.com/api/health/status 2>/dev/null | jq '.|{AppEngine: .status.AppEngine, Redis: [.status.Redis]}' | jq '.|{App: .AppEngine.state, Redis: .Redis[0].state}'
{
  "App": "UP",
  "Redis": "DOWN"
}


